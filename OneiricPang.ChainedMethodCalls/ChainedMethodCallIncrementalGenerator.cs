using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace OneiricPang.ChainedMethodCalls
{
    [Generator(LanguageNames.CSharp)]
    public class ChainedMethodCallIncrementalGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Register the attribute source
            context.RegisterPostInitializationOutput(ck =>
            {
                ck.AddSource("OneiricPang.ChainedMethodCallObjectAttribute.g.cs", ChainedMethodCallObjectHelper.ChainedMethodCallObjectAttribute);
            });

            var targetClassNameProvider = context.SyntaxProvider.ForAttributeWithMetadataName("OneiricPang.ChainedMethodCalls.ChainedMethodCallObjectAttribute",
                (node, _) => node is ClassDeclarationSyntax, (syntaxContext, _) => syntaxContext);

            context.RegisterSourceOutput(targetClassNameProvider, (spc, c) =>
            {


                if (c.TargetNode is ClassDeclarationSyntax classDeclaration)
                {
                    if (classDeclaration.Modifiers.Any(m => m.IsKind(SyntaxKind.PartialKeyword)))
                    {
                        var members = classDeclaration.Members;

                        if (members.Any())
                        {
                            var chainedAttr = c.Attributes.FirstOrDefault(a => a.AttributeClass?.ToString() == "OneiricPang.ChainedMethodCalls.ChainedMethodCallObjectAttribute")!;

                            string getPrefix = (string)chainedAttr.ConstructorArguments[0].Value!;
                            string setPrefix = (string)chainedAttr.ConstructorArguments[1].Value!;
                            string callPrefix = (string)chainedAttr.ConstructorArguments[2].Value!;
                            string cutOffMethod = (string)chainedAttr.ConstructorArguments[3].Value!;

                            var className = classDeclaration.Identifier;
                            var spaceName = GetSpaceName(classDeclaration);

                            var modifier = classDeclaration.Modifiers;
                            var syntaxTree = classDeclaration.SyntaxTree;

                            var root = syntaxTree.GetRoot() as CompilationUnitSyntax;

                            var fileName = System.IO.Path.GetFileNameWithoutExtension(syntaxTree.FilePath);

                            StringBuilder sb = new StringBuilder();
                            sb.AppendLine($"// <auto-generated/>");
                            sb.AppendLine($"#nullable enable");
                            sb.AppendLine($"{root?.Usings}");
                            sb.AppendLine($"namespace {spaceName}");
                            sb.AppendLine($"{{");
                            sb.AppendLine($" {modifier} class {className}");
                            sb.AppendLine($"{{");

                            foreach (var m in members)
                            {


                                if (m is PropertyDeclarationSyntax prop)
                                {
                                    var trivas = m.GetLeadingTrivia().Select(i => i.GetStructure()).OfType<DocumentationCommentTriviaSyntax>().FirstOrDefault();

                                    var xml = trivas?.ToString();

                                    var propertySymbol = c.SemanticModel.GetDeclaredSymbol(prop);
                                    if (propertySymbol?.Parameters.Any() == true)
                                    {
                                        continue;
                                    }

                                    var ptype = prop.Type;
                                    var pmodifier = prop.Modifiers;
                                    var staticModifier = pmodifier.FirstOrDefault(m => m.IsKind(SyntaxKind.StaticKeyword));

                                    if (prop.AccessorList?.Accessors.Any(a => a.Keyword.IsKind(SyntaxKind.GetKeyword)) == true)
                                    {
                                        if (!string.IsNullOrEmpty(xml))
                                        {
                                            sb.AppendLine($"/// {xml?.ToString().Replace("<summary>", $"<summary>\n/// 读取")}");
                                        }
                                        else
                                        {
                                            sb.AppendLine($"/// <summary>");
                                            sb.AppendLine($"/// 读取");
                                            sb.AppendLine($"/// 属性 {prop.Identifier} 的值.");
                                            sb.AppendLine($"/// </summary>");
                                        }
                                        sb.AppendLine($"{pmodifier.Remove(staticModifier)} {className} {getPrefix}{prop.Identifier}(out {ptype} value)");
                                        sb.AppendLine($"{{");
                                        sb.AppendLine($"value = {prop.Identifier};");
                                        sb.AppendLine($"return this;");
                                        sb.AppendLine($"}}");
                                    }


                                    if (prop.AccessorList?.Accessors.Any(a => a.Keyword.IsKind(SyntaxKind.SetKeyword)) == true)
                                    {

                                        if (!string.IsNullOrEmpty(xml))
                                        {
                                            sb.AppendLine($"/// {xml?.ToString().Replace("<summary>", $"<summary>\n/// 写入")}");
                                        }
                                        else
                                        {
                                            sb.AppendLine($"/// <summary>");
                                            sb.AppendLine($"/// 写入");
                                            sb.AppendLine($"/// 属性 {prop.Identifier} 的值.");
                                            sb.AppendLine($"/// </summary>");
                                        }
                                        sb.AppendLine($"{pmodifier.Remove(staticModifier)} {className} {setPrefix}{prop.Identifier}({ptype} value)");
                                        sb.AppendLine($"{{");
                                        sb.AppendLine($"{prop.Identifier} = value;");
                                        sb.AppendLine($"return this;");
                                        sb.AppendLine($"}}");
                                    }
                                }
                                else if (m is MethodDeclarationSyntax method)
                                {
                                    var trivas = m.GetLeadingTrivia().Select(i => i.GetStructure()).OfType<DocumentationCommentTriviaSyntax>().FirstOrDefault();
                                    var xml = trivas?.ToString();

                                    if (method.ReturnType.IsKind(SyntaxKind.GenericName)) continue;

                                    var pmodifier = m.Modifiers;
                                    var staticModifier = pmodifier.FirstOrDefault(m => m.IsKind(SyntaxKind.StaticKeyword));
                                    var paramModifier = pmodifier.FirstOrDefault(m => m.IsKind(SyntaxKind.ParamsKeyword));
                                    var returnType = method.ReturnType;
                                    var typeParamaterList = method.TypeParameterList;

                                    if (returnType is PredefinedTypeSyntax predefinedTypeSyntax && predefinedTypeSyntax.Keyword.IsKind(SyntaxKind.VoidKeyword))
                                    {

                                        if (!string.IsNullOrEmpty(xml))
                                        {
                                            sb.AppendLine($"/// {xml?.ToString().Replace("<summary>", $"<summary>\n/// 执行")}");
                                        }
                                        else
                                        {
                                            sb.AppendLine($"/// <summary>");
                                            sb.AppendLine($"/// 执行");
                                            sb.AppendLine($"/// 方法 {method.Identifier}() .");
                                            sb.AppendLine($"/// </summary>");
                                        }
                                        sb.AppendLine($"{pmodifier.Remove(staticModifier)} {className} {callPrefix}{method.Identifier}{typeParamaterList}{method.ParameterList}");
                                        sb.AppendLine($"{{");
                                        sb.AppendLine($"{method.Identifier}({string.Join(",", method.ParameterList.Parameters.Select(a => $"{string.Join(",", a.Modifiers.Select(m => !m.IsKind(SyntaxKind.ParamsKeyword) ? m.ToString() : string.Empty))} {a.Identifier}"))});");
                                        sb.AppendLine($"return this;");
                                        sb.AppendLine($"}}");

                                    }
                                    else
                                    {
                                        string paramaterStr = $"out {returnType} chainResult";
                                        var paramaters = method.ParameterList.Parameters.ToList();
                                        if (paramaters.Count > 0)
                                        {
                                            var separamaterList = SyntaxFactory.SeparatedList(paramaters);
                                            paramaterStr = $"({paramaterStr},{separamaterList})";
                                        }


                                        if (!string.IsNullOrEmpty(xml))
                                        {
                                            sb.AppendLine($"/// {xml?.ToString().Replace("<summary>", $"<summary>\n/// 执行")}");
                                            sb.AppendLine($"/// <param name=\"chainResult\">返回值</param>");
                                        }
                                        else
                                        {
                                            sb.AppendLine($"/// <summary>");
                                            sb.AppendLine($"/// 执行");
                                            sb.AppendLine($"/// 方法 {method.Identifier}() 并获取返回值.");
                                            sb.AppendLine($"/// </summary>");
                                            sb.AppendLine($"/// <param name=\"chainResult\">返回值</param>");
                                        }
                                        sb.AppendLine($"{pmodifier.Remove(staticModifier)} {className} {callPrefix}{method.Identifier}{typeParamaterList}{paramaterStr}");
                                        sb.AppendLine($"{{");
                                        sb.AppendLine($"chainResult = {method.Identifier}({string.Join(",", method.ParameterList.Parameters.Select(a => $"{string.Join(",", a.Modifiers.Select(m => !m.IsKind(SyntaxKind.ParamsKeyword) ? m.ToString() : string.Empty))} {a.Identifier}"))});");
                                        sb.AppendLine($"return this;");
                                        sb.AppendLine($"}}");

                                    }


                                }

                            }

                            sb.AppendLine($"/// <summary>");
                            sb.AppendLine($"/// 结束链.");
                            sb.AppendLine($"/// </summary>");
                            sb.AppendLine($"public void {cutOffMethod}()");
                            sb.AppendLine($"{{");

                            sb.AppendLine($"}}");

                            sb.AppendLine($"}}");
                            sb.AppendLine($"}}");

                            var soure = sb.ToString();
                            spc.AddSource($"OneiricPang.ChainedMethodCalls.{spaceName}.{className}.g.cs", soure);

                        }
                    }
                    else
                    {
                        spc.ReportDiagnostic(Diagnostic.Create(ChainedMethodCallDiagnosticAnalyzer.LostPartialRule, classDeclaration.Identifier.GetLocation(), classDeclaration.Identifier.Text));
                    }


                }

            });

        }

        private string GetSpaceName(ClassDeclarationSyntax classDeclarationSyntax)
        {

            List<string> spaceNameList = [];


            var parent = classDeclarationSyntax.Parent;

            while (parent != null)
            {

                if (parent is NamespaceDeclarationSyntax namespaceDeclarationSyntax)
                {
                    spaceNameList.Add(namespaceDeclarationSyntax.Name.ToString());
                }

                parent = parent.Parent;
            }
            spaceNameList.Reverse();
            return string.Join(".", spaceNameList);
        }
    }
}
